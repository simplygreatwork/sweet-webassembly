(module

	(import "../lib/utility.watm")
	(import "../lib/memory.watm")
	(import "../lib/string.watm")
	(import "../lib/number.watm")
	(import "../lib/list.watm")
	(import "../lib/assertion.watm")
	(import "../lib/tree.watm")
	(import "../lib/map.watm")
	(import "../lib/treemap.watm")
	(import "../lib/table.watm")
	(import "host" "table" (table 2 anyfunc))
	(memory (import "host" "memory") 1)
	(elem (i32.const 0) $test_list_iterate_each)
	(elem (i32.const 3) $test_map_iterate_each)

	(function $main
		
		(call $setup)
		(call $test_hello_world)
		(call $test_string_macro)
		(call $test_string_alphanum)
		(call $test_string_clone)
		(call $test_string_append)
		(call $test_string_compare)
		(call $test_number_add)
		(call $test_boolean_and)
		(call $test_array)
		(call $test_list)
		(call $test_map)
		(call $test_tree)
		(call $test_tree_map)
		(call $test_arguments_dynamic)
		(call $test_stream)
		(call $test_table)
		(call $test_string_compare)
	)
	
	(func $setup
		
		(i32.store (i32.const 0) (i32.const 4096))
	)
	
	(func $test_hello_world
		
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Hello World!"))
	)
	
	(func $test_string_macro
		
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Hello from a string macro!"))
	)
	
	(func $test_string_alphanum
		
		(local $string i32)
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Alphanumeric string"))
		(call $print_string (string "------------------------------"))
		(call $print_string (string "09AZaz"))
	)
	
	(func $test_string_clone
		
		(local $string i32)
		(local $string_result i32)
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Cloning a string"))
		(call $print_string (string "------------------------------"))
		(set_local $string (string "abc"))
		(set_local $string_result (call $string_clone (get_local $string)))
		(call $assert_string_equals (get_local $string) (get_local $string_result))
	)
	
	(func $test_string_append
		
		(local $string_a i32)
		(local $string_b i32)
		(local $string_result i32)
		(local $string_expected i32)

		(call $print_string (string "------------------------------"))
		(call $print_string (string "Appending a string"))
		(call $print_string (string "------------------------------"))
		(set_local $string_a (string "abcd"))
		(call $print_string (get_local $string_a))
		
		(set_local $string_b (string "efghi"))
		(call $print_string (get_local $string_b))
		
		(set_local $string_result (call $string_append (get_local $string_a) (get_local $string_b)))
		(set_local $string_expected (string "abcdefghi"))
		(call $assert_string_equals (get_local $string_expected) (get_local $string_result))
	)

	(func $test_string_compare
		
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Comparing strings"))
		(call $print_string (string "------------------------------"))
		(call $assert_number_equals
			(call $number_new (i32.const 0))
			(call $number_new (call $string_compare (string "abc") (string "abc")))
		)
		(call $assert_number_equals
			(call $number_new (i32.const -1))
			(call $number_new (call $string_compare (string "ab") (string "ac")))
		)
		(call $assert_number_equals
			(call $number_new (i32.const 1))
			(call $number_new (call $string_compare (string "ac") (string "ab")))
		)
		(call $assert_number_equals
			(call $number_new (i32.const 1))
			(call $number_new (call $string_compare (string "ab") (string "abc")))
		)
		(call $assert_number_equals
			(call $number_new (i32.const -1))
			(call $number_new (call $string_compare (string "abc") (string "ab")))
		)
	)
	
	(func $test_number_add
		
		(local $number_a i32)
		(local $number_b i32)
		(local $number_c i32)
		(local $number_expected i32)
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Adding numbers"))
		(call $print_string (string "------------------------------"))
		(set_local $number_a (call $number_new (i32.const 3)))
		(set_local $number_b (call $number_new (i32.const 4)))
		(set_local $number_c (call $number_add (get_local $number_a) (get_local $number_b)))
		(set_local $number_expected (call $number_new (i32.const 7)))
		(call $print_string (call $number_to_string (get_local $number_a)))
		(call $print_string (call $number_to_string (get_local $number_b)))
		(call $print_string (call $number_to_string (get_local $number_c)))
		(call $assert_number_type (get_local $number_c))
		(call $assert_number_equals (get_local $number_c) (get_local $number_expected))
	)
	
	(func $test_number_iterate
		
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Iterating a number"))
		(call $print_string (string "------------------------------"))
		(call $number_iterate (call $number_new (i32.const 5)))
	)
	
	(func $test_number_iterate_each (param $index i32)
		
		(call $print_integer (get_local $index))
	)

	(func $test_boolean_and
		
		(local $boolean_a i32)
		(local $boolean_b i32)
		(local $boolean_c i32)
		(local $boolean_expected i32)
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Comparing booleans"))
		(call $print_string (string "------------------------------"))
	)

	(func $test_array
		
		(local $array i32)
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Testing an array"))
		(call $print_string (string "------------------------------"))
	)

	(func $test_list
		
		(local $list i32)
		(local $item i32)
		(local $index i32)
		(local $test_list_iterate_each i32)
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Testing a list"))
		(call $print_string (string "------------------------------"))
		(set_local $list (call $list_new))
		(set_local $test_list_iterate_each (i32.const 0))
		(call $list_append (get_local $list) (string "a"))
		(call $list_append (get_local $list) (string "b"))
		(call $list_append (get_local $list) (string "c"))
		(call $list_iterate (get_local $list) (get_local $test_list_iterate_each) (i32.const 0))
		(call $print_string (call $number_to_string (call $list_length (get_local $list))))
		(call $assert_list_type (get_local $list))
		(call $assert_list_length (get_local $list) (call $number_new (i32.const 3)))
		(set_local $index (call $list_index_of (get_local $list) (string "c")))
		(call $print_integer (get_local $index))
	)
	
	(func $test_list_iterate_each (param $item i32) (param $index i32) (param $context i32)
		
		(call $print_string (call $item_value (get_local $item)))
	)
	
	(func $test_map
		
		(local $map i32)
		(local $test_map_iterate_each i32)
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Testing a map"))
		(call $print_string (string "------------------------------"))
		(set_local $test_map_iterate_each (i32.const 3))
		(set_local $map (call $map_new))
		(call $map_set (get_local $map) (string "one") (call $number_new (i32.const 1)))
		(call $map_set (get_local $map) (string "two") (call $number_new (i32.const 2)))
		(call $map_set (get_local $map) (string "three") (call $number_new (i32.const 3)))
		(call $map_iterate (get_local $map) (get_local $test_map_iterate_each) (i32.const 0))
	)
	
	(func $test_map_iterate_each (param $key i32) (param $value i32) (param $index i32) (param $context i32)
		
		(call $print_string (get_local $key))
		(call $print_string (call $number_to_string (get_local $value)))
	)

	(func $test_tree
		
		(local $tree i32)
		(local $root i32)
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Testing a binary search tree"))
		(call $print_string (string "------------------------------"))
		(set_local $tree (call $tree_new))
		(set_local $root (i32.const 0))
		(set_local $root (call $tree_insert (call $node_new (string "2") (i32.const 2)) (get_local $root)))
		(set_local $root (call $tree_insert (call $node_new (string "1") (i32.const 1)) (get_local $root)))
		(set_local $root (call $tree_insert (call $node_new (string "3") (i32.const 3)) (get_local $root)))
		(call $tree_walk (get_local $root))
	)
	
	(func $test_tree_map
		
		(local $map i32)
		(local $test_map_iterate_each i32)
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Testing a tree map"))
		(call $print_string (string "------------------------------"))
	)

	(func $test_arguments_dynamic
		
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Testing dynamic arguments"))
		(call $print_string (string "(requires map implementation)"))
		(call $print_string (string "------------------------------"))
	)

	(func $test_stream
		
		(call $print_string (string "------------------------------"))
		(call $print_string (string "Testing a stream"))
		(call $print_string (string "------------------------------"))
	)

	(export "main" (func $main))
)
