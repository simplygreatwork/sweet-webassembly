(module
	
	import "../lib/utility.watm"
	import "../lib/memory.watm"
	import "../lib/string.watm"
	import "host" "table" (table 1 anyfunc)
	memory (import "host" "memory") 1
	type $void_to_void (func)
	
	func main
		
		setup
		test_call_macro
		test_string_macro_expansion
		test_integer_macro_expansion
		test_func_ref_macro
		test_set_get_macros (i32.const 0)
		test_flow_macros_basis
		test_flow_macros_implementation
	
	func setup
		
		memory_bootstrap

	func test_call_macro
		
		print_string "------------------------------"
		print_string "Test call macro!"
		print_string "------------------------------"
		(call print_string (string "with call keyword, with string keyword"))
		print_string "without call keyword, without string keyword"
	
	func test_string_macro_expansion
		
		print_string "------------------------------"
		print_string "Test string macro"
		print_string "------------------------------"
   
	func test_integer_macro_expansion
		
		print_string "------------------------------"
		print_string "Test integer macro expansion"
		print_string "------------------------------"
		print_integer 100
	
	func test_func_ref_macro
		
		print_string "------------------------------"
		print_string "Test function reference macro!"
		print_string "------------------------------"
		call_indirect (type $void_to_void) (funcref "test_function_first_class_a" "macros")
		call_indirect (type $void_to_void) (funcref "test_function_first_class_b" "macros")

	func test_function_first_class_a
		
		print_string "------------------------------"
		print_string "First class function A has been called using a funcref macro!"
		print_string "------------------------------"

	func test_function_first_class_b
		
		print_string "------------------------------"
		print_string "First class function B has been called using a funcref macro!"
		print_string "------------------------------"
		
	func test_set_get_macros (param $a i32)
		
		local $c i32
		print_string "------------------------------"
		print_string "Test local variable get and set! (partially implemented)"
		print_string "------------------------------"
		print_string "Set values which have not been declared"
		set b to 2
		set string to "string"
		;; let a as i32 be 1
	
	(func test_flow_macros_basis
		
		(local $i i32)
		(print_string "------------------------------")
		(print_string "Test flow macros! (not implemented)")
		(print_string "------------------------------")
		(set_local $i (i32.const 0))
		(block
			(loop
				(call $print_integer (get_local $i))
				(if (i32.eq (get_local $i) (i32.const 5)) (then
					(br 2)
				))
				(set_local $i (i32.add (get_local $i) (i32.const 1)))
				(br 0)
			)
		)
	)

	func test_flow_macros_goal

		;;	repeat
		;;		print i
		;;		if (i equals 10)
		;;			exit repeat

	(func test_flow_macros_implementation
		
		
	)

	export "main" (func $main)
)
