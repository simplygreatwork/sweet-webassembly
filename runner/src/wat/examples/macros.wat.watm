(module
	
	import "../lib/utility.watm"
	import "../lib/memory.watm"
	import "../lib/string.watm"
	import "host" "table" (table 1 anyfunc)
	memory (import "host" "memory") 1
	type $void_to_void (func)
	
	func main
		
		setup
		test_call_macro
		test_string_macro_expansion
		test_integer_macro_expansion
		test_func_ref_macro
		test_set_get_macros (i32.const 0)
		test_flow_macros

	func setup
		
		memory_bootstrap

	func test_call_macro
		
		print_string "------------------------------"
		print_string "Test call macro!"
		print_string "------------------------------"
		(call print_string (string "with call keyword, with string keyword"))
		print_string "without call keyword, without string keyword"
	
	func test_string_macro_expansion
		
		print_string "------------------------------"
		print_string "Test string macro"
		print_string "------------------------------"
   
	func test_integer_macro_expansion
		
		print_string "------------------------------"
		print_string "Test integer macro expansion"
		print_string "------------------------------"
		print_integer 100
	
	func test_func_ref_macro
		
		print_string "------------------------------"
		print_string "Test function reference macro!"
		print_string "------------------------------"
		call_indirect (type $void_to_void) (funcref "test_function_first_class_a" "macros")
		call_indirect (type $void_to_void) (funcref "test_function_first_class_b" "macros")

	func test_function_first_class_a
		
		print_string "------------------------------"
		print_string "First class function A has been called using a funcref macro!"
		print_string "------------------------------"

	func test_function_first_class_b
		
		print_string "------------------------------"
		print_string "First class function B has been called using a funcref macro!"
		print_string "------------------------------"
		
	func test_set_get_macros (param $a i32)
		
		local $c i32
		print_string "------------------------------"
		print_string "Test local variable get and set! (partially implemented)"
		print_string "------------------------------"
		print_string "Set values which have not been declared"
		set b to 2
		set string to "string"
		;; let a as i32 be 1
		
	func test_flow_macros
		
		(print_string "------------------------------")
		(print_string "Test flow macros!")
		(print_string "------------------------------")

		set k to 0
		repeat from 0 to 20 skip 2 with k
			print_string "iteration"
			print_integer (get_local $k)
			if (i32.gt_u (get_local $k) (i32.const 13))
				then (br 2) ;; "exit repeat" or "break"
)
