(module

	(import "./utility.watm")
	(import "./memory.watm")
	(import "./number.watm")	
	(import "./string.watm")	
	(import "host" "table" (table 1 anyfunc))
	(memory (import "host" "memory") 1)
	
	(func $tree_new (result i32)
		
		(local $tree i32)
		(i32.store (i32.add (get_local $tree) (i32.const 0)) (i32.const 31))			;; type
		(i32.store (i32.add (get_local $tree) (i32.const 4)) (i32.const 0))			;; root (null)
		(get_local $tree)
	)

	(func $tree_root (param $tree i32) (result i32)
		(i32.load (i32.add (get_local $tree) (i32.const 4)))
	)

	(func $tree_root_set (param $tree i32) (param $node i32)
		(i32.store (i32.add (get_local $node) (i32.const 4)) (get_local $node))
	)
	
	(func $tree_insert (param $node i32) (param $root i32) (result i32)
		
		(local $result i32)
		(set_local $result (get_local $root))
		(if
			(i32.eq (get_local $root) (i32.const 0))
			(then (set_local $result (get_local $node)))
			(else (if
				(i32.ne (call $node_key (get_local $node)) (call $node_key (get_local $root)))
				(then (if
					(i32.eq (call $tree_string_compare (call $node_key (get_local $node)) (call $node_key (get_local $root))) (i32.const -1))
					(then (call $node_left_set (get_local $root) (call $tree_insert (get_local $node) (call $node_left (get_local $root)))))
					(else (call $node_right_set (get_local $root) (call $tree_insert (get_local $node) (call $node_right (get_local $root)))))
				))
			))
		)
		(get_local $result)
	)
	
	(func $tree_number_compare (param $number_a i32) (param $number_b i32) (result i32)

		(call $number_compare (get_local $number_a) (get_local $number_b))
	)
	
	(func $tree_string_compare (param $string_a i32) (param $string_b i32) (result i32)
		
		(call $string_compare (get_local $string_a) (get_local $string_b))
	)
	
	(func $tree_walk (param $root i32)
		
		(if
			(i32.ne (get_local $root) (i32.const 0))
			(then
				(call $tree_walk (call $node_left (get_local $root)))
				(call $print_string (call $node_key (get_local $root)))
				(call $tree_walk (call $node_right (get_local $root)))
			)
		)
	)

	(func $tree_find (param $tree i32) (param $item i32)
		
	)
	
	(func $tree_iterate (param $tree i32)
		
	)
	
	(func $tree_size (result i32)
		(i32.const 0)
	)
	
	(func $node_new (param $key i32) (param $value i32) (result i32)
		
		(local $node i32)
		(set_local $node (call $memory_allocate (i32.const 20)))
		(i32.store (i32.add (get_local $node) (i32.const 0)) (i32.const 31))			;; type
		(i32.store (i32.add (get_local $node) (i32.const 4)) (get_local $key))		;; key
		(i32.store (i32.add (get_local $node) (i32.const 8)) (get_local $value))	;; value
		(i32.store (i32.add (get_local $node) (i32.const 12)) (i32.const 0))			;; left (null)
		(i32.store (i32.add (get_local $node) (i32.const 16)) (i32.const 0))			;; right (null)
		(get_local $node)
	)

	(func $node_key (param $node i32) (result i32)
		(i32.load (i32.add (get_local $node) (i32.const 4)))
	)
	
	(func $node_key_set (param $node i32) (param $key i32)
		(i32.store (i32.add (get_local $node) (i32.const 4)) (get_local $key))
	)
	
	(func $node_value (param $node i32) (result i32)
		(i32.load (i32.add (get_local $node) (i32.const 8)))
	)
	
	(func $node_value_set (param $node i32) (param $value i32)
		(i32.store (i32.add (get_local $node) (i32.const 8)) (get_local $value))
	)

	(func $node_left (param $node i32) (result i32)
		(i32.load (i32.add (get_local $node) (i32.const 12)))
	)
	
	(func $node_left_set (param $node i32) (param $left i32)
		(i32.store (i32.add (get_local $node) (i32.const 12)) (get_local $left))
	)

	(func $node_right (param $node i32) (result i32)
		(i32.load (i32.add (get_local $node) (i32.const 16)))
	)
	
	(func $node_right_set (param $node i32) (param $right i32)
		(i32.store (i32.add (get_local $node) (i32.const 16)) (get_local $right))
	)
)
