(module
	
	(import "./utility.watm")
	(import "./memory.watm")
	(import "./string.watm")
	(memory (import "host" "memory") 1)
	
	(func $allocator_bytes (result i32)
		(i32.const 4)
	)
	
	(func $allocator_new (param $value i32) (result i32)
		
		(local $allocator i32)
		(set_local $allocator (call $memory_allocate (typeof "allocator") (call $allocator_bytes)))
		(call $allocator_page_total_set (get_local $allocator) (i32.const 0))
		(call $allocator_page_indice_set (get_local $allocator) (i32.const -1))
		(call $allocator_grow (get_local $allocator))
		(get_local $allocator)
	)

	(func $allocator_page_total (param $allocator i32)
		(i32.load (i32.add (get_local $allocator) (i32.const 0)))
	)

	(func $allocator_page_total_set (param $allocator i32) (param $page_total i32) 
		(i32.store (i32.add (get_local $allocator) (i32.const 0)) (get_local $page_total))
	)

	(func $allocator_page_indice (param $allocator i32)
		(i32.load (i32.add (get_local $allocator) (i32.const 4)))
	)

	(func $allocator_page_indice_set (param $allocator i32) (param $page_indice i32) 
		(i32.store (i32.add (get_local $allocator) (i32.const 4)) (get_local $page_indice))
	)

	(func $allocator_grow (param $allocator i32)
		
		(call $allocator_page_total_up (get_local $allocator))
		(call $allocator_page_indice_set
			(get_local $allocator)
			(i32.sub (call $allocator_page_total (get_local $allocator)) (i32.const 1))
		)
	)

	(func $allocator_allocate (param $allocator i32) (param $type i32) (param $size i32)
		
		(local $result i32)
		(local $total i32)
		(local $i i32)
		(local $page_indice i32)
		(local $page i32)
		(local $pointer i32)
		(set_local $i (i32.const 0))
		(block (loop
			(set_local $page_indice (call $allocator_page_indice (get_local $allocator)))
			(set_local $page (call $allocator_page_by_indice (get_local $allocator) (get_local $page_indice)))
			(set_local $pointer (call $page_allocate (get_local $page) (get_local $type) (get_local $size)))
			(if (i32.ne (get_local $pointer) (i32.const 0))
				(then (br 1))
				(else
					(call $allocator_page_next (get_local $allocator))
				)
			)
			(set_local $i (i32.add (get_local $i) (i32.const 1)))
			(br_if 1 (i32.eq (get_local $i) (get_local $total)))
			(br 0)
		))
		(if (i32.eq (get_local $pointer) (i32.const 0)) (then
			(call $allocator_grow)
			(set_local $result (call $allocator_allocate (get_local $allocator) (get_local $type) (get_local $size)))
		) (else 
			(set_local $result (get_local $pointer))
		)
		(get_local $result)
	)

	(func $allocator_page_next (param $allocator i32)
		
		(call $allocator_page_indice_increment (get_local $allocator))
		(if (i32.eq
			(call $allocator_page_indice (get_local $allocator))
			(call $allocator_page_total (get_local $allocator)))
		) (then
			(call $allocator_page_indice_set (get_local $allocator) (i32.const 0))
		)
	)

	(func $allocator_page_indice_increment (param $allocator i32)
		(call $allocator_page_indice_set (get_local $allocator) (i32.add (call $allocator_page_indice (get_local $allocator)) (i32.const 1)))
	)

	(func $allocator_page_indice_decrement (param $allocator i32)
		(call $allocator_page_indice_set (get_local $allocator) (i32.sub (call $allocator_page_indice (get_local $allocator)) (i32.const 1)))
	)
	
	(func $allocator_page_total_increment (param $allocator i32)
		(call $allocator_page_total_set (get_local $allocator) (i32.add (call $allocator_page_total (get_local $allocator)) (i32.const 1)))
	)
	
	(func $allocator_page_total_decrement (param $allocator i32)
		(call $allocator_page_total_set (get_local $allocator) (i32.sub (call $allocator_page_total (get_local $allocator)) (i32.const 1)))
	)

	(func $allocator_pages_offset (param $allocator i32) (param $index i32)	
		(i32.mul (i32.const 4) (call $page_width)
	)
	
	(func $allocator_page_by_indice (param $allocator i32) (param $indice i32)
		
		(i32.add
			(call $allocator_pages_offset (get_local $allocator))
			(i32.mul (get_local $indice) (call $page_width))
		)
	)
	
	(func $allocator_page_by_pointer (param $allocator i32) (param $pointer i32)	

		(i32.add
			(call $allocator_pages_offset (get_local $allocator))
			(i32.mul (i32.div_u (get_local $pointer) (call $page_width)) (call $page_width)
		)
	)
		
	(func $allocator_deallocate (param $allocator i32) (param $pointer i32)

		(local $page i32)
		(set_local $page (call $allocator_page_by_pointer (get_local $allocator) (get_local $pointer))
		(set_local $pointer (call $page_global_to_local (get_local $page) (get_local $pointer)))
		(call $page_deallocate (get_local $page) (get_local $pointer))
	)
	
	(func $page_local_to_global (param $page i32) (param $pointer i32)	
		(i32.add (get_local $page) (get_local $pointer)
	)

	(func $page_global_to_local (param $page i32) (param $pointer i32)
		(i32.sub (get_local $pointer) (get_local $page))
	)

	(func $page_width (result i32)
		(i32.const 65536)
	)
	
	(func $page_bytes (result i32)
		(i32.const 8)
	)
	
	(func $page_usable_bytes (result i32)
		(i32.sub (call $page_width) (call $page_bytes)
	)
	
	(func $page_initialize (param $index i32)
		
		(local $page i32)
		(set_local $page (call $allocator_page_by_index (get_local $index)))
		(call $page_used_bytes_set (get_local $page) (i32.const 0))
		(call $page_void_first_set (get_local $page) (call $page_initialize_void (get_local $page)))
	)
	
	(func $page_initialize_void (param $page i32)							;; no longer needed using marker
		
		(local $void i32)
		(local $pointer i32)
		(set_local $pointer (i32.add (get_local $page) (call $page_bytes)))
		(set_local $void (call $void_initialize (get_local $pointer) (get_local $length)))
		(call $void_next_set (get_local $void))
		(call $void_previous_set (get_local $void))
		(get_local $void)
	)
	
	(func $page_allocate (param $page i32) (param $type i32) (param $size i32) (result i32)
		
		(local result i32)
		(set_local $result (call $page_allocate_using_counter (get_local $page) (get_local $type) (get_local $size)))
		;;(set_local $result (call $page_allocate_using_voids (get_local $page) (get_local $type) (get_local $size)))		
		(get_local $result)
	)

	(func $page_allocate_using_counter (param $page i32) (param $type i32) (param $size i32) (result i32)
		
		(local $pointer)
		(local $marker i32)
		(set_local $pointer (i32.const 0))
		(set_local $marker (call $page_marker (get_local $page)))
		(if
			(i32.lt_u (i32.add (get_local $marker) (get_local $size)) (call $page_width))
			(then (set_local pointer (get_local $marker)))
		)
		(get_local $pointer)
	)

	(func $page_allocate_using_voids (param $page i32) (param $type i32) (param $size i32) (result i32)
		
		(local $pointer i32)
		(local $void i32)
		(local $proceed i32)
		(set_local $pointer (i32.const 0))
		(set_local $void (call $page_void_last (get_local $page)))
		(if (i32.eq (call $void_length (get_local $void)) (get_local $size)) (then
			(set_local $proceed (i32.const 1)))
		)
		(if (i32.gt_u (call $void_length (get_local $void)) (i32.const 16)) (then
			(set_local $proceed (i32.const 1)))
		)
		(if (i32.eq (get_local $proceed) (i32.const 1)) (then
			(set_local $pointer (get_local $void))
			(set_local $void (call $page_void_trim_left (get_local $page) (get_local $void) (get_local $size)))
		)
		(get_local $pointer)
	)

	(func $page_void_trim_left (param $page i32) (param $void i32) (param $bytes i32) (result i32)
		
		(local $void_length i32)
		(local $void_next i32)
		(local $void_previous i32)
		(set_local $void_length (call $void_length (get_local $void)))
		(set_local $void_next (call $void_next (get_local $void)))
		(set_local $void_previous (call $void_previous (get_local $void)))
		(set_local $void (i32.add (get_local $void) (get_local $bytes)))
		(set_local $length (i32.sub (get_local $length) (get_local $bytes)))
		(call $void_initialize (get_local $void) (get_local $length))
		(call $void_next_set (get_local $void_previous) (get_local $void))
		(call $void_previous_set (get_local $void_next) (get_local $void))
		(call $page)
	)

	(func $page_marker (param $page i32) (result i32)
		(i32.store16 (i32.add (get_local $page) (i32.const 0)))
	)
	
	(func $page_marker_set (param $page i32) (param $marker i32)
		(i32.load16_u (i32.add (get_local $page) (i32.const 0)) (get_local $marker))
	)

	(func $page_used_bytes (param $page i32) (result i32)
		(i32.store16 (i32.add (get_local $page) (i32.const 2)))
	)
	
	(func $page_used_bytes_set (param $page i32) (param $bytes i32)
		(i32.load16_u (i32.add (get_local $page) (i32.const 2)) (get_local $bytes))
	)

	(func $page_free_bytes (param $page i32) (result i32)
		(i32.const 0)
	)
	
	(func $page_void_first (param $page i32) (result i32)
		(i32.load16_u (i32.add (get_local $allocator) (i32.const 4)))
	)
	
	(func $page_void_first_set (param $page i32) (param $void i32) (result i32)
		(i32.store16 (i32.add (get_local $page) (i32.const 4)) (get_local $void))
	)

	(func $page_void_last (param $page i32) (result i32)
		(call $void_previous (call $page_void_first (get_local $page)))
	)
	
	(func $page_deallocate (param $page i32) (param $pointer i32)
		
		(local $void i32)
		(local $void_next i32)
		(local $void_previous i32)
		(set_local $void (call $void_initialize (get_local $pointer)))
		(set_local $void_next (call $page_find_next_void (get_local $void)))
		(set_local $void_previous (call $void_previous (get_local $void_next)))
		(call $void_next_set (get_local $void) (get_local $void_next))
		(call $void_previous_set (get_local $void) (get_local $void_previous))
		(call $void_next_set (get_local $void_previous) (get_local $void))
		(call $void_previous_set (get_local $void_next) (get_local $void))
		(call $page)
	)

	(func $page_insert_void (param $page i32) (param $pointer i32) (result i32)
		
		(i32 $result i32)
		(get_local $result)
	)
	
	(func $page_find_next_void (param $page i32) (param $pointer i32) (result i32)
		
		(i32 $result i32)
		(if 
			(i32.eq (i32.const 0) (i32.const 0))
			(then (set_local $result (call $page_iterate_to_next_void (get_local $page) (get_local $pointer)))
			(else (set_local $result (call $page_scan_to_next_void (get_local $page) (get_local $pointer)))
		)
		(get_local $result)
	)

	(func $page_iterate_to_next_void (param $page i32) (param $pointer i32) (result i32)
		
		(local $result i32)
		(local $void i32)
		(set_local $void (call $page_void_first (get_local $page)))
		(block (loop
			(if (i32.gt (get_local $void) (get_local $pointer)) (then
				(set_local $result (call $void_previous (get_local $void)))
				(br 1)
			))
			(set_local $void (call $void_next (get_local $void)))
			(br_if 1 (i32.eq ((get_local $void) (i32.const 0)))
			(br_if 1 (i32.eq ((get_local $void) (call $page_void_first (get_local $page))))
			(br 0)
		))
		(local $result i32)
	)

	(func $page_scan_to_next_void (param $page i32) (param $pointer i32) (result i32)		;; faster to use existing voids
		(i32.const 0)		
	)
	
	(func $page_join_voids (param $page i32) (param $void_a i32) (param $void_b i32)
		
		;; change length of the void
		;; update next and previous
	)

	(func $page_compact_one (param $page i32)

		(local $void i32)
		(local $void_next i32)
		(set_local $void (call $page_voids (get_local $page)))
		(set_local $void_next (call $page_void_nexy (get_local $void)))
		;; compact the first void of the page
		;; update the void list to remove that void
	)

	(func $void_bytes (result i32)
		(i32.const 8)
	)
	
	(func $void_initialize (param $pointer i32) (param $length i32)
		
		(call $void_length_set (get_local $pointer) (get_local $length))
		(get_local $pointer)
	)
	
	(func $void_length (param $void i32) (result i32)
		(i32.load16_u (i32.add (get_local $void) (i32.const 0)))
	)
	
	(func $void_length_set (param $void i32) (param $length i32)
		(i32.store16 (i32.add (get_local $void) (i32.const 0)) (get_local $length))
	)
	
	(func $void_skip (param $void i32) (result i32)
		(i32.load16_u (i32.add (get_local $void) (i32.const 2)))
	)

	(func $void_skip_set (param $void i32) (param $next i32)
		(i32.store16 (i32.add (get_local $void) (i32.const 2)) (get_local $next))		
	)

	(func $void_next (param $void i32) (result i32)
		(i32.load16_u (i32.add (get_local $void) (i32.const 4)))
	)

	(func $void_next_set (param $void i32) (param $next i32)
		(i32.store16 (i32.add (get_local $void) (i32.const 4)) (get_local $next))		
	)

	(func $void_previous (param $void i32) (result i32)
		(i32.load16_u (i32.add (get_local $void) (i32.const 6)))
	)

	(func $void_previous_set (param $void i32) (param $previous i32)
		(i32.store16 (i32.add (get_local $void) (i32.const 6)) (get_local $previous))		
	)
	
	(func $void_join (param $void i32) (param $void_b i32)
		
		;; change length of the void
		;; update next and previous
	)

	(func $void_cleanse (param $void i32)
		
		(local $length i32)
		(local $begin i32)
		(local $end i32)
		(local $i i32)
		(set_local $length (call $void_length (get_local $void)))
		(set_local $begin (call $void_bytes))
		(set_local $end (i32.add (get_local $begin) (get_local $length))
		(set_local $i (get_local $begin))
		(block (loop
			(br_if 1 (i32.eq (get_local $i) (get_local $end)))
			(set_local $i (i32.add (get_local $i) (i32.const 0)))
			(br 0)
		))
	)
)
