(module
	
	(import "./utility.watm")
	(import "./memory.watm")
	(import "./string.watm")
	(memory (import "host" "memory") 1)
	
	(func $allocator_bytes (result i32)
		(i32.const 4)
	)
	
	(func $allocator_new (param $value i32) (result i32)
		
		(local $allocator i32)
		(set_local $allocator (call $memory_allocate (typeof "allocator") (call $allocator_bytes)))
		(call $allocator_page_total_set (get_local $allocator) (i32.const 0))
		(call $allocator_page_indice_set (get_local $allocator) (i32.const -1))
		(call $allocator_grow (get_local $allocator))
		(get_local $allocator)
	)

	(func $allocator_page_total (param $allocator i32) (result i32)
		(i32.load (i32.add (get_local $allocator) (i32.const 0)))
	)

	(func $allocator_page_total_set (param $allocator i32) (param $page_total i32) 
		(i32.store (i32.add (get_local $allocator) (i32.const 0)) (get_local $page_total))
	)

	(func $allocator_page_indice (param $allocator i32) (result i32)
		(i32.load (i32.add (get_local $allocator) (i32.const 4)))
	)

	(func $allocator_page_indice_set (param $allocator i32) (param $page_indice i32) 
		(i32.store (i32.add (get_local $allocator) (i32.const 4)) (get_local $page_indice))
	)

	(func $allocator_grow (param $allocator i32)
		
		(local $indice i32)
		(local $page i32)
		(call $allocator_page_total_increment (get_local $allocator))
		(call $allocator_page_indice_set (get_local $allocator) (i32.sub (call $allocator_page_total (get_local $allocator)) (i32.const 1)))
		(set_local $indice (call $allocator_page_indice (get_local $allocator)))
		(set_local $page (call $allocator_page_by_indice (get_local $allocator) (get_local $indice)))
		(call $page_initialize (get_local $page))
	)

	(func $allocator_allocate (param $allocator i32) (param $type i32) (param $size i32) (result i32)
		
		(local $result i32)
		(local $total i32)
		(local $i i32)
		(local $page_indice i32)
		(local $page i32)
		(local $pointer i32)
		(set_local $i (i32.const 0))
		(block (loop
			(set_local $page_indice (call $allocator_page_indice (get_local $allocator)))
			(set_local $page (call $allocator_page_by_indice (get_local $allocator) (get_local $page_indice)))
			(set_local $pointer (call $page_allocate (get_local $page) (get_local $type) (get_local $size)))
			(if (i32.ne (get_local $pointer) (i32.const 0)) (then
				(br 1)
			) (else
				(call $allocator_page_next (get_local $allocator))
			))
			(set_local $i (i32.add (get_local $i) (i32.const 1)))
			(br_if 1 (i32.eq (get_local $i) (get_local $total)))
			(br 0)
		))
		(if (i32.eq (get_local $pointer) (i32.const 0)) (then
			(call $allocator_grow (get_local $allocator))
			(set_local $result (call $allocator_allocate (get_local $allocator) (get_local $type) (get_local $size)))
		) (else
			(set_local $result (get_local $pointer))
		))
		(get_local $result)
	)
	
	(func $allocator_page_next (param $allocator i32)
		
		(call $allocator_page_indice_increment (get_local $allocator))
		(if (i32.eq
			(call $allocator_page_indice (get_local $allocator))
			(call $allocator_page_total (get_local $allocator))
		) (then
			(call $allocator_page_indice_set (get_local $allocator) (i32.const 0))
		))
	)
	
	(func $allocator_page_indice_increment (param $allocator i32)
		(call $allocator_page_indice_set (get_local $allocator) (i32.add (call $allocator_page_indice (get_local $allocator)) (i32.const 1)))
	)

	(func $allocator_page_indice_decrement (param $allocator i32)
		(call $allocator_page_indice_set (get_local $allocator) (i32.sub (call $allocator_page_indice (get_local $allocator)) (i32.const 1)))
	)
	
	(func $allocator_page_total_increment (param $allocator i32)
		(call $allocator_page_total_set (get_local $allocator) (i32.add (call $allocator_page_total (get_local $allocator)) (i32.const 1)))
	)

	(func $allocator_page_total_decrement (param $allocator i32)
		(call $allocator_page_total_set (get_local $allocator) (i32.sub (call $allocator_page_total (get_local $allocator)) (i32.const 1)))
	)

	(func $allocator_pages_offset (param $allocator i32) (result i32)
		(i32.mul (i32.const 4) (call $page_width))
	)
	
	(func $allocator_page_by_indice (param $allocator i32) (param $indice i32) (result i32)
		
		(i32.add
			(call $allocator_pages_offset (get_local $allocator))
			(i32.mul (get_local $indice) (call $page_width))
		)
	)
	
	(func $allocator_page_by_pointer (param $allocator i32) (param $pointer i32) (result i32)

		(i32.add
			(call $allocator_pages_offset (get_local $allocator))
			(i32.mul (i32.div_u (get_local $pointer) (call $page_width)) (call $page_width))
		)
	)
	
	(func $allocator_deallocate (param $allocator i32) (param $pointer i32)

		(local $page i32)
		(set_local $page (call $allocator_page_by_pointer (get_local $allocator) (get_local $pointer)))
		(set_local $pointer (call $page_global_to_local (get_local $page) (get_local $pointer)))
		(call $page_deallocate (get_local $page) (get_local $pointer))
	)
	
	(func $page_local_to_global (param $page i32) (param $pointer i32) (result i32)
		(i32.add (get_local $page) (get_local $pointer))
	)

	(func $page_global_to_local (param $page i32) (param $pointer i32) (result i32)
		(i32.sub (get_local $pointer) (get_local $page))
	)

	(func $page_width (result i32)
		(i32.const 65536)
	)
	
	(func $page_bytes (result i32)
		(i32.const 8)
	)
	
	(func $page_bytes_usable (result i32)
		(i32.sub (call $page_width) (call $page_bytes))
	)
	
	(func $page_initialize (param $page i32)
		
		(call $page_cursor_set (get_local $page) (i32.const 8))
		(call $page_bytes_used_set (get_local $page) (i32.const 0))
		(call $page_gap_first_set (get_local $page) (i32.const 0))
		(call $page_gap_current_set (get_local $page) (i32.const 0))
	)
	
	(func $page_cursor (param $page i32) (result i32)
		(i32.load16_u (i32.add (get_local $page) (i32.const 0)))
	)
	
	(func $page_cursor_set (param $page i32) (param $cursor i32)
		(i32.store16 (i32.add (get_local $page) (i32.const 0)) (get_local $cursor))
	)

	(func $page_cursor_increment_by (param $page i32) (param $bytes i32)
		(call $page_cursor_set (get_local $page) (i32.add (call $page_cursor (get_local $page)) (get_local $bytes)))
	)

	(func $page_cursor_decrement_by (param $page i32) (param $bytes i32)
		(call $page_cursor_set (get_local $page) (i32.sub (call $page_cursor (get_local $page)) (get_local $bytes)))
	)
	
	(func $page_bytes_used (param $page i32) (result i32)
		(i32.load16_u (i32.add (get_local $page) (i32.const 2)))
	)
	
	(func $page_bytes_used_set (param $page i32) (param $bytes i32)
		(i32.store16 (i32.add (get_local $page) (i32.const 2)) (get_local $bytes))
	)

	(func $page_bytes_used_increment_by (param $page i32) (param $bytes i32)
		(call $page_bytes_used_set (get_local $page) (i32.add (call $page_bytes_used (get_local $page)) (get_local $bytes)))
	)

	(func $page_bytes_used_decrement_by (param $page i32) (param $bytes i32)
		(call $page_bytes_used_set (get_local $page) (i32.sub (call $page_bytes_used (get_local $page)) (get_local $bytes)))
	)

	(func $page_gap_first (param $page i32) (result i32)
		(i32.load16_u (i32.add (get_local $page) (i32.const 4)))
	)
	
	(func $page_gap_first_set (param $page i32) (param $gap i32)
		(i32.store16 (i32.add (get_local $page) (i32.const 4)) (get_local $gap))
	)
	
	(func $page_gap_current (param $page i32) (result i32)
		(i32.load16_u (i32.add (get_local $page) (i32.const 6)))
	)
	
	(func $page_gap_current_set (param $page i32) (param $gap i32)
		(i32.store16 (i32.add (get_local $page) (i32.const 6)) (get_local $gap))
	)
	
	(func $page_allocate (param $page i32) (param $type i32) (param $size i32) (result i32)
		
		(local $result i32)
		(set_local $result (call $page_allocate_using_cursor (get_local $page) (get_local $type) (get_local $size)))
		;;(set_local $result (call $page_allocate_using_gaps (get_local $page) (get_local $type) (get_local $size)))		
		(get_local $result)
	)

	(func $page_allocate_using_cursor (param $page i32) (param $type i32) (param $size i32) (result i32)
		
		(local $pointer i32)
		(local $cursor i32)
		(local $cursor_next i32)
		(set_local $pointer (i32.const 0))
		(set_local $cursor (call $page_cursor (get_local $page)))
		(set_local $cursor_next (i32.add (get_local $cursor) (get_local $size)))
		(if
			(i32.le_u (get_local $cursor_next) (call $page_width))
			(then
				(set_local $pointer (get_local $cursor))
				(call $page_cursor_set (get_local $page) (get_local $cursor_next))
			)
		)
		(get_local $pointer)
	)

	(func $page_allocate_using_gaps (param $page i32) (param $type i32) (param $size i32) (result i32)
		
		(local $pointer i32)
		(local $gap i32)
		(local $proceed i32)
		(set_local $pointer (i32.const 0))
		(set_local $gap (call $page_gap_last (get_local $page)))
		(if (i32.eq (call $gap_length (get_local $gap)) (get_local $size)) (then
			(set_local $proceed (i32.const 1))
		))
		(if (i32.gt_u (call $gap_length (get_local $gap)) (i32.const 16)) (then
			(set_local $proceed (i32.const 1))
		))
		(if (i32.eq (get_local $proceed) (i32.const 1)) (then
			(set_local $pointer (get_local $gap))
			(set_local $gap (call $page_gap_trim_left (get_local $page) (get_local $gap) (get_local $size)))
		))
		(get_local $pointer)
	)

	(func $page_gap_trim_left (param $page i32) (param $gap i32) (param $bytes i32) (result i32)
		
		(local $length i32)
		(local $gap_length i32)
		(local $gap_next i32)
		(local $gap_previous i32)
		(set_local $gap_length (call $gap_length (get_local $gap)))
		(set_local $gap_next (call $gap_next (get_local $gap)))
		(set_local $gap_previous (call $gap_previous (get_local $gap)))
		(set_local $gap (i32.add (get_local $gap) (get_local $bytes)))
		(set_local $length (i32.sub (get_local $gap_length) (get_local $bytes)))
		(call $gap_initialize (get_local $gap) (get_local $length))
		(call $gap_next_set (get_local $gap_previous) (get_local $gap))
		(call $gap_previous_set (get_local $gap_next) (get_local $gap))
	)
	
	(func $page_bytes_free (param $page i32) (result i32)
		(i32.const 0)
	)

	(func $page_gap_last (param $page i32) (result i32)
		(call $gap_previous (call $page_gap_first (get_local $page)))
	)
	
	(func $page_deallocate (param $page i32) (param $pointer i32)
		
		(local $length i32)
		(local $gap i32)
		(local $gap_next i32)
		(local $gap_previous i32)
		(set_local $length (call $page_type_sizeof ))
		(call $page_bytes_used_decrement_by (get_local $page) (get_local $length))
		(call $page_allocate_gap (get_local $page) (get_local $pointer) (get_local $length))
	)
	
	(func $page_type_sizeof (param $page i32) (param $pointer i32)
		(i32.const 0)
	)

	(func $page_allocate_gap (param $page i32) (param $pointer i32) (param $length i32)
		
		(local $gap i32)
		(local $gap_next i32)
		(local $gap_previous i32)
		(call $page_bytes_used_decrement_by (get_local $page) (get_local $length))
		(set_local $gap (call $gap_initialize (get_local $pointer) (get_local $length)))
		(set_local $gap_next (call $page_find_next_gap (get_local $page) (get_local $gap)))
		(set_local $gap_previous (call $gap_previous (get_local $gap_next)))
		(call $gap_next_set (get_local $gap) (get_local $gap_next))
		(call $gap_previous_set (get_local $gap) (get_local $gap_previous))
		(call $gap_next_set (get_local $gap_previous) (get_local $gap))
		(call $gap_previous_set (get_local $gap_next) (get_local $gap))
	)

	(func $page_compact_next (param $page i32)

		;; compact the first gap of the page
		;; update the gap list to remove that gap
		(local $gap i32)
		(local $gap_next i32)
		(set_local $gap (call $page_gap_first (get_local $page)))
		(set_local $gap_next (call $gap_next (get_local $gap)))
	)

	(func $gap_bytes (result i32)
		(i32.const 8)
	)

	(func $gap_bytes_actual (param $gap i32) (result i32)
		(call $gap_length (get_local $gap))
	)

	(func $gap_initialize (param $pointer i32) (param $length i32) (result i32)
		
		(local $gap i32)
		(set_local $gap (get_local $pointer))
		(call $gap_type_set (get_local $gap) (typeof "gap"))
		(call $gap_length_set (get_local $gap) (get_local $length))
		(get_local $gap)
	)

	(func $gap_type (param $gap i32) (result i32)
		(i32.load16_u (i32.add (get_local $gap) (i32.const 0)))
	)
	
	(func $gap_type_set (param $gap i32) (param $type i32)
		(i32.store16 (i32.add (get_local $gap) (i32.const 0)) (get_local $length))
	)

	(func $gap_length (param $gap i32) (result i32)
		(i32.load16_u (i32.add (get_local $gap) (i32.const 2)))
	)
	
	(func $gap_length_set (param $gap i32) (param $length i32)
		(i32.store16 (i32.add (get_local $gap) (i32.const 2)) (get_local $length))
	)
	
	(func $gap_next (param $gap i32) (result i32)
		(i32.load16_u (i32.add (get_local $gap) (i32.const 4)))
	)

	(func $gap_next_set (param $gap i32) (param $next i32)
		(i32.store16 (i32.add (get_local $gap) (i32.const 4)) (get_local $next))		
	)
	
	(func $gap_skip (param $gap i32) (result i32)
		(i32.load16_u (i32.add (get_local $gap) (i32.const 6)))
	)

	(func $gap_skip_set (param $gap i32) (param $next i32)
		(i32.store16 (i32.add (get_local $gap) (i32.const 6)) (get_local $next))		
	)
	
	(func $gap_join (param $gap i32) (param $gap_b i32)
		
		;; change length of the gap
		;; update next and previous
		(local $value i32)
	)
	
	(func $gap_cleanse (param $gap i32)
		
		(local $length i32)
		(local $begin i32)
		(local $end i32)
		(local $i i32)
		(set_local $length (call $gap_length (get_local $gap)))
		(set_local $begin (get_local $gap))
		(set_local $end (i32.sub (i32.add (get_local $begin) (get_local $length))) (i32.const 1))
		(set_local $i (get_local $begin))
		(block (loop
			(br_if 1 (i32.eq (get_local $i) (get_local $end)))
			(set_local $i (i32.add (get_local $i) (i32.const 1)))
			(i32.store8 (get_local $i) (i32.const 0))
			(br 0)
		))
	)
)
